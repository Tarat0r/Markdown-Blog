name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go and build the project
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1
          cache-dependency-path: 'api/go.sum'

      - name: Install Go dependencies
        working-directory: ./api
        run: go mod tidy

      - name: Build the project
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          STATIC_PATH: ${{ vars.STATIC_PATH }}
          HOST_ADDRESS: ${{ vars.HOST_ADDRESS }}
        run: go build ./...

      # Set up Python for both clients
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies for Note Sync
        working-directory: ./pc_client
        run: |
          echo "DIRECTORY=${{ vars.DIRECTORY }}" >> .env
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ vars.HOST_ADDRESS }}" >> .env
          echo "STATE_FILE=${{ vars.STATE_FILE }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies for Web Service
        working-directory: ./useless_client
        run: |
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ vars.HOST_ADDRESS }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test:
    name: Test
    runs-on: ubuntu-latest
    environment: development
    needs: build

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1
          cache-dependency-path: 'api/go.sum'

      - name: Install Go dependencies
        working-directory: ./api
        run: go mod tidy

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Run SQL migration
        run: psql "$DATABASE_URL" -f ./database/markdown_blog.sql
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run Go tests
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          STATIC_PATH: ${{ vars.STATIC_PATH }}
          HOST_ADDRESS: ${{ vars.HOST_ADDRESS }}
        run: |
            echo "STATIC_PATH=$STATIC_PATH"
            go test ./...

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies for Note Sync
        working-directory: ./pc_client
        run: |
          echo "DIRECTORY=${{ vars.DIRECTORY }}" >> .env
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ vars.HOST_ADDRESS }}" >> .env
          echo "STATE_FILE=${{ vars.STATE_FILE }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies for Web Service
        working-directory: ./useless_client
        run: |
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ vars.HOST_ADDRESS }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests for Note Sync
        run: python -m unittest pc_client/tests/test.py

      - name: Run tests for Web Service
        run: python -m unittest useless_client/tests/test_app.py

  code_quality:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    environment: development
    needs: test

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Set up JDK 17 for Sonar Scanner
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Sonar packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # ------------------ Coverage (Go) ------------------

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1
          cache-dependency-path: 'api/go.sum'
        
      - name: Install Go dependencies
        working-directory: ./api
        run: go mod tidy

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Run SQL migration
        run: psql "$DATABASE_URL" -f ./database/markdown_blog.sql
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}


      - name: Run Go tests
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          STATIC_PATH: ${{ vars.STATIC_PATH }}
          HOST_ADDRESS: ${{ vars.HOST_ADDRESS }}
        run: |
          go test ./... -covermode=atomic -coverpkg=./... -coverprofile=coverage.out
          go tool cover -func=coverage.out
          sed -i -e 's|github.com/Tarat0r/Markdown-Blog/|api/|' coverage.out

      # ------------------ Python  ------------------

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies for Note Sync
        working-directory: ./pc_client
        run: |
          echo "DIRECTORY=${{ vars.DIRECTORY }}" >> .env
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ vars.HOST_ADDRESS }}" >> .env
          echo "STATE_FILE=${{ vars.STATE_FILE }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies for Web Service
        working-directory: ./useless_client
        run: |
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ vars.HOST_ADDRESS }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python tests with coverage
        run: |
          pip install coverage
          coverage run -m unittest discover pc_client/tests
          coverage xml -o coverage-pc_client.xml
          coverage run -m unittest discover useless_client/tests
          coverage xml -o coverage-useless_client.xml      

      # ------------------ SonarQube Scan ------------------
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        # with:
          # args: >-
        #     -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
        #     -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
        #     -Dsonar.sources=.
        #     -Dsonar.go.coverage.reportPaths=api/coverage.out
        #     -Dsonar.python.coverage.reportPaths=coverage-pc_client.xml,coverage-useless_client.xml

      - name: SonarQube Quality Gate
        id: quality_gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          pollingTimeoutSec: 600
          
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: code_quality
    if: ${{ github.ref == 'refs/heads/main' && success() }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Build api Docker image
        run: docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-api:latest -f api/Dockerfile .

      - name: Build useless_client Docker image
        run: docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-useless-client:latest -f useless_client/Dockerfile .

      - name: Push api Docker image
        run: docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-api:latest

      - name: Push useless_client Docker image
        run: docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-useless-client:latest

  deploy:
    name: Deploy to DigitalOcean Kubernetes
    runs-on: ubuntu-latest
    needs: docker
    if: ${{ github.ref == 'refs/heads/main' && success() }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up kubeconfig
        run: |
          mkdir -p .kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > .kube/config

      - name: Test kubectl connection
        run: |
          cat .kube/config | grep server
          kubectl --kubeconfig .kube/config get nodes

      - name: Deploy updated Docker images
        run: |
          kubectl set image deployment/mdblog-api mdblog-api=ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-api:latest -n mdblog
          kubectl set image deployment/mdblog-client mdblog-client=ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-useless-client:latest -n mdblog
