name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go and build the project
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1
          cache-dependency-path: 'api/go.sum'

      - name: Install Go dependencies
        working-directory: ./api
        run: go mod tidy

      - name: Build the project
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
          STATIC_PATH: ${{ secrets.STATIC_PATH }}
          HOST_ADDRESS: ${{ secrets.HOST_ADDRESS }}
        run: go build ./...

      # Set up Python for both clients
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies for Note Sync
        working-directory: ./pc_client
        run: |
          echo "DIRECTORY=${{ secrets.DIRECTORY }}" >> .env
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ secrets.HOST_ADDRESS }}" >> .env
          echo "STATE_FILE=${{ secrets.STATE_FILE }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies for Web Service
        working-directory: ./useless_client
        run: |
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ secrets.HOST_ADDRESS }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test:
    name: Test
    runs-on: ubuntu-latest
    environment: development
    needs: build

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1
          cache-dependency-path: 'api/go.sum'

      - name: Install Go dependencies
        working-directory: ./api
        run: go mod tidy

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Run SQL migration
        run: psql "$DATABASE_URL" -f ./database/markdown_blog.sql
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run Go tests
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
          STATIC_PATH: ${{ secrets.STATIC_PATH }}
          HOST_ADDRESS: ${{ secrets.HOST_ADDRESS }}
        run: go test ./tests/handlers_test.go

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies for Note Sync
        working-directory: ./pc_client
        run: |
          echo "DIRECTORY=${{ secrets.DIRECTORY }}" >> .env
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ secrets.HOST_ADDRESS }}" >> .env
          echo "STATE_FILE=${{ secrets.STATE_FILE }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies for Web Service
        working-directory: ./useless_client
        run: |
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ secrets.HOST_ADDRESS }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests for Note Sync
        run: python -m unittest pc_client/tests/test.py

      - name: Run tests for Web Service
        run: python -m unittest useless_client/tests/test_app.py

  sonarqube-analysis:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

# GO Part

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1
          cache-dependency-path: 'api/go.sum'

      - name: Install Go dependencies
        working-directory: ./api
        run: go mod tidy

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Run SQL migration
        run: psql "$DATABASE_URL" -f ./database/markdown_blog.sql
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Generate Go test coverage
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
          STATIC_PATH: ${{ secrets.STATIC_PATH }}
          HOST_ADDRESS: ${{ secrets.HOST_ADDRESS }}
        run: go test -coverprofile=coverage.out ./...

# Python Part

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies for Note Sync
        working-directory: ./pc_client
        run: |
          echo "DIRECTORY=${{ secrets.DIRECTORY }}" >> .env
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ secrets.HOST_ADDRESS }}" >> .env
          echo "STATE_FILE=${{ secrets.STATE_FILE }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies for Web Service
        working-directory: ./useless_client
        run: |
          echo "API_TOKEN=${{ secrets.AUTHORIZATION }}" >> .env
          echo "SERVER_URL=${{ secrets.HOST_ADDRESS }}" >> .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt


      - name: Run Python tests with coverage
        run: |
          cd pc_client
          pip install -r requirements.txt
          coverage run -m unittest discover
          coverage xml -o coverage-pc_client.xml
          cd ..

          cd useless_client
          pip install -r requirements.txt
          coverage run -m unittest discover
          coverage xml -o coverage-useless_client.xml
          cd ..

      - name: Download and run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"

          sonar-scanner \
            -Dsonar.projectKey=your_project_key \
            -Dsonar.organization=your_org_id \
            -Dsonar.sources=api,pc_client,useless_client \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverageReportPaths=api/coverage.out,pc_client/coverage-pc_client.xml,useless_client/coverage-useless_client.xml \
            -Dsonar.qualitygate.wait=true

        
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    if: ${{ github.ref == 'refs/heads/main' && success() }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Build api Docker image
        run: docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-api:latest -f api/Dockerfile .

      - name: Build useless_client Docker image
        run: docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-useless-client:latest -f useless_client/Dockerfile .

      - name: Push api Docker image
        run: docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-api:latest

      - name: Push useless_client Docker image
        run: docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/mdblog-useless-client:latest
