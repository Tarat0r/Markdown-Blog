// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createNote = `-- name: CreateNote :one

INSERT INTO notes (user_id, path, content) 
VALUES ($1, $2, $3) 
RETURNING id, user_id, path, content, hash, created_at, updated_at
`

type CreateNoteParams struct {
	UserID  int32  `json:"user_id"`
	Path    string `json:"path"`
	Content string `json:"content"`
}

// -----------------
// Notes Queries --
// -----------------
func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote, arg.UserID, arg.Path, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Path,
		&i.Content,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteImage, id)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteNote, id)
	return err
}

const getIDByToken = `-- name: GetIDByToken :one
SELECT id FROM users
WHERE api_token = $1
`

func (q *Queries) GetIDByToken(ctx context.Context, apiToken string) (int32, error) {
	row := q.db.QueryRow(ctx, getIDByToken, apiToken)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getImageByHash = `-- name: GetImageByHash :one
SELECT id, note_id, file_path, hash, uploaded_at FROM images WHERE hash = $1
`

func (q *Queries) GetImageByHash(ctx context.Context, hash string) (Image, error) {
	row := q.db.QueryRow(ctx, getImageByHash, hash)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.FilePath,
		&i.Hash,
		&i.UploadedAt,
	)
	return i, err
}

const getImageByID = `-- name: GetImageByID :one
SELECT id, note_id, file_path, hash, uploaded_at FROM images WHERE id = $1
`

func (q *Queries) GetImageByID(ctx context.Context, id int32) (Image, error) {
	row := q.db.QueryRow(ctx, getImageByID, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.FilePath,
		&i.Hash,
		&i.UploadedAt,
	)
	return i, err
}

const getImagesForNote = `-- name: GetImagesForNote :many
SELECT i.id, i.note_id, i.file_path, i.hash, i.uploaded_at 
FROM images i
JOIN notes_images ni ON i.id = ni.image_id
WHERE ni.note_id = $1
`

func (q *Queries) GetImagesForNote(ctx context.Context, noteID int32) ([]Image, error) {
	rows, err := q.db.Query(ctx, getImagesForNote, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.NoteID,
			&i.FilePath,
			&i.Hash,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNoteByID = `-- name: GetNoteByID :one
SELECT id, user_id, path, content, hash, created_at, updated_at FROM notes WHERE id = $1
`

func (q *Queries) GetNoteByID(ctx context.Context, id int32) (Note, error) {
	row := q.db.QueryRow(ctx, getNoteByID, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Path,
		&i.Content,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotesForImage = `-- name: GetNotesForImage :many
SELECT n.id, n.user_id, n.path, n.content, n.hash, n.created_at, n.updated_at 
FROM notes n
JOIN notes_images ni ON n.id = ni.note_id
WHERE ni.image_id = $1
`

func (q *Queries) GetNotesForImage(ctx context.Context, imageID int32) ([]Note, error) {
	rows, err := q.db.Query(ctx, getNotesForImage, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Path,
			&i.Content,
			&i.Hash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkImageToNote = `-- name: LinkImageToNote :exec

INSERT INTO notes_images (note_id, image_id) 
VALUES ($1, $2)
`

type LinkImageToNoteParams struct {
	NoteID  int32 `json:"note_id"`
	ImageID int32 `json:"image_id"`
}

// ----------------------------------------------
// Many-to-Many Relationship (Notes & Images) --
// ----------------------------------------------
func (q *Queries) LinkImageToNote(ctx context.Context, arg LinkImageToNoteParams) error {
	_, err := q.db.Exec(ctx, linkImageToNote, arg.NoteID, arg.ImageID)
	return err
}

const listNotesByUser = `-- name: ListNotesByUser :many
SELECT path, hash FROM notes WHERE user_id = $1 ORDER BY created_at DESC
`

type ListNotesByUserRow struct {
	Path string `json:"path"`
	Hash string `json:"hash"`
}

func (q *Queries) ListNotesByUser(ctx context.Context, userID int32) ([]ListNotesByUserRow, error) {
	rows, err := q.db.Query(ctx, listNotesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListNotesByUserRow
	for rows.Next() {
		var i ListNotesByUserRow
		if err := rows.Scan(&i.Path, &i.Hash); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tokenExists = `-- name: TokenExists :one

SELECT COUNT(*) FROM users
WHERE api_token = $1
`

// -----------------
// Users Queries --
// -----------------
func (q *Queries) TokenExists(ctx context.Context, apiToken string) (int64, error) {
	row := q.db.QueryRow(ctx, tokenExists, apiToken)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const unlinkImageFromNote = `-- name: UnlinkImageFromNote :exec
DELETE FROM notes_images WHERE note_id = $1 AND image_id = $2
`

type UnlinkImageFromNoteParams struct {
	NoteID  int32 `json:"note_id"`
	ImageID int32 `json:"image_id"`
}

func (q *Queries) UnlinkImageFromNote(ctx context.Context, arg UnlinkImageFromNoteParams) error {
	_, err := q.db.Exec(ctx, unlinkImageFromNote, arg.NoteID, arg.ImageID)
	return err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes SET content = $2 WHERE id = $1
`

type UpdateNoteParams struct {
	ID      int32  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.Exec(ctx, updateNote, arg.ID, arg.Content)
	return err
}

const uploadImage = `-- name: UploadImage :one

INSERT INTO images (note_id, file_path, hash) 
VALUES ($1, $2, $3) 
RETURNING id, note_id, file_path, hash, uploaded_at
`

type UploadImageParams struct {
	NoteID   int32  `json:"note_id"`
	FilePath string `json:"file_path"`
	Hash     string `json:"hash"`
}

// ------------------
// Images Queries --
// ------------------
func (q *Queries) UploadImage(ctx context.Context, arg UploadImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, uploadImage, arg.NoteID, arg.FilePath, arg.Hash)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.FilePath,
		&i.Hash,
		&i.UploadedAt,
	)
	return i, err
}
