-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.images
(
    id serial NOT NULL,
    note_id integer NOT NULL,
    file_path text COLLATE pg_catalog."default" NOT NULL,
    file_hash text COLLATE pg_catalog."default" NOT NULL,
    uploaded_at timestamp without time zone DEFAULT now(),
    CONSTRAINT images_pkey PRIMARY KEY (id),
    CONSTRAINT images_file_hash_key UNIQUE (file_hash)
);

CREATE TABLE IF NOT EXISTS public.note_images
(
    note_id integer NOT NULL,
    image_id integer NOT NULL,
    CONSTRAINT note_images_pkey PRIMARY KEY (note_id, image_id)
);

CREATE TABLE IF NOT EXISTS public.notes
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    path character varying(255) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT notes_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    name character varying(255) NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    api_token text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_api_token_key UNIQUE (api_token),
    CONSTRAINT users_email_key UNIQUE (email)
);

ALTER TABLE IF EXISTS public.note_images
    ADD CONSTRAINT note_images_image_id_fkey FOREIGN KEY (image_id)
    REFERENCES public.images (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.note_images
    ADD CONSTRAINT note_images_note_id_fkey FOREIGN KEY (note_id)
    REFERENCES public.notes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notes
    ADD CONSTRAINT notes_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_notes_user_id
    ON public.notes(user_id);

END;

-- Create Indexes for Faster Queries
CREATE INDEX idx_notes_user_id ON notes(user_id);
CREATE INDEX idx_images_note_id ON images(note_id);
CREATE INDEX idx_images_hash ON images(file_hash);

-- Create Trigger Function to Update 'updated_at' on Notes Table
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Attach Trigger to Notes Table (Auto-update 'updated_at' on changes)
CREATE TRIGGER trigger_update_modified
BEFORE UPDATE ON notes
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();
